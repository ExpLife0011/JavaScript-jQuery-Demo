<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta name="keywords" content="ArcGIS JavaScript API" />
	<link href="jsdoc.css" rel="stylesheet" type="text/css"/>
	<title>ArcGIS JavaScript API</title>
</head>

<body>

<!--***REQUIRED TITLE***-->
<div id="pageBanner">Find a route</div>
<!--***END REQUIRED TITLE***-->

  <div id="nstext">

	<H4 class=dtH4><a href="../../demos/routetask/routetask_find_route.html" target="_blank">View live sample</a></H4>
  <H4 class=dtH4>描述</H4>

  <!--***START TEXT - DO NOT WRITE ABOVE THIS LINE***-->

	<p>This sample demonstrates the simplest use of the route task: finding a route between two points. Click the map to add stops to the route. When you've added two stops a route will be calculated. Adding subsequent stops extends the route.</p>
	<p>When working with the Route Task, you set up some <a href="../jsapi/routeparameters.htm">RouteParameters</a>, such as the stops, then call the <a href="../jsapi/routetask.htm#solve">RouteTask.solve()</a> method when you're ready to find the route. In this sample, the map's <a href="../jsapi/map.htm#onclick">onClick</a> event adds a stop. When two stops are detected, the solve method is called. You can listen for the <a href="../jsapi/routetask.htm#onsolvecomplete">onSolveComplete</a> event to draw the results on the map. The drawing is accomplished in this example through the <b>showRoute</b> function.</p>
	<p>You'll also want to handle errors in case a route can't be calculated. In this sample, if the route task fires the <a href="../jsapi/routetask.htm#onerror">onError</a> event, the <b>errorHandler</b> function is called. This function displays a message with the error text and removes the stop that caused the error, thus allowing the user to continue adding stops.</p>

  <!--***END TEXT - DO NOT WRITE BELOW THIS LINE***--> 

  <H4 class=dtH4>Code</H4>
  <div class="detailSample">
  <code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"<br/>
&nbsp;&nbsp; "http://www.w3.org/TR/html4/strict.dtd"&gt;<br/>
<br/>
&lt;html lang="en"&gt;<br/>
&nbsp;&nbsp;&lt;head&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta http-equiv="X-UA-Compatible" content="IE=7" /&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Simple Routing&lt;/title&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.5/js/dojo/dijit/themes/tundra/tundra.css"&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.5"&gt;&lt;/script&gt;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;script type="text/javascript"&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dojo.require("esri.map");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dojo.require("esri.tasks.route");<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var map, routeTask, routeParams;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var stopSymbol, routeSymbol, lastStop;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function init() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map = new esri.Map("map", {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;extent:new esri.geometry.Extent({xmin:-117.22111701965332,ymin:34.039506912231445,xmax:-117.16961860656738,ymax:34.07383918762207,spatialReference:{wkid:4326}})<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.addLayer(new esri.layers.ArcGISTiledMapServiceLayer("http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dojo.connect(map, "onClick", addStop);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeTask = new esri.tasks.RouteTask("http://tasks.arcgisonline.com/ArcGIS/rest/services/NetworkAnalysis/ESRI_Route_NA/NAServer/Route");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeParams = new esri.tasks.RouteParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeParams.stops = new esri.tasks.FeatureSet();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dojo.connect(routeTask, "onSolveComplete", showRoute);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dojo.connect(routeTask, "onError", errorHandler);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopSymbol = new esri.symbol.SimpleMarkerSymbol().setStyle(esri.symbol.SimpleMarkerSymbol.STYLE_CROSS).setSize(15);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopSymbol.outline.setWidth(4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeSymbol = new esri.symbol.SimpleLineSymbol().setColor(new dojo.Color([0,0,255,0.5])).setWidth(5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dojo.addOnLoad(init);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adds a graphic when the user clicks the map. If 2 or more points exist, route is solved.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function addStop(evt) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var stop = map.graphics.add(new esri.Graphic(evt.mapPoint, stopSymbol));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeParams.stops.features.push(stop);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (routeParams.stops.features.length &gt;= 2) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeTask.solve(routeParams);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastStop = routeParams.stops.features.splice(0, 1)[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adds the solved route to the map as a graphic<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function showRoute(routeResults, barriers) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.graphics.add(routeResults[0].route.setSymbol(routeSymbol));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Displays any error returned by the Route Task<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function errorHandler(err) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("An error occured\n" + err.message + "\n" + err.details.join("\n"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routeParams.stops.features.splice(0, 0, lastStop);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.graphics.remove(routeParams.stops.features.splice(1, 1)[0]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br/>
<br/>
&nbsp;&nbsp;&lt;/head&gt;<br/>
&nbsp;&nbsp;&lt;body class="tundra"&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id="map" style="width:600px; height:400px; border:1px solid #000;"&gt;&lt;/div&gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;Click on the map to add stops to the route. The route from the last stop to the newly added stop is calculated. If a stop is not reachable, it is removed and the last valid point is set as the starting point.&lt;/p&gt;<br/>
&nbsp;&nbsp;&lt;/body&gt;<br/>
&lt;/html&gt;<br/>
</code>
  			</div>


<br/><br/></div> 
</body>
</html>
