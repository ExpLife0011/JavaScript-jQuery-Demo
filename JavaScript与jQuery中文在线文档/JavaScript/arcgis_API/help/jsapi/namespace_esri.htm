<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta name="keywords" content="ArcGIS JavaScript API" />
	<link href="jsdoc.css" rel="stylesheet" type="text/css"/>
	<title>namespace_esri</title>
</head>

<body id="theBody" >

<div id="pageBanner">Namespace: esri</div>

<div id="nstext">
<H4 class=dtH4>描述</H4>
	<div class="detaildesc">
	esri命名空间有几个相关的通用方法。这些方法是与任何类无关的方法。
	</div>

<H4 class=dtH4>属性表</H4>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
	<th class="tableheader">属性</th>
	<th class="tableheader">类型</th>
	<th class="tableheader">描述</th>
	</tr>

<tr>
		<td class="syntaxTABLE"><a href="#config">config</a></td>
<td class="syntaxTABLE">
Object
</td>

<td class="syntaxTABLE">
ArcGIS JavaScript API默认配置能够由程序覆盖。详细信息，见<a href="../jshelp/inside_defaults.htm">Default API configurations</a></td>
		</tr>
<tr>
		<td class="syntaxTABLE"><a href="#documentBox">documentBox</a></td>
<td class="syntaxTABLE">
Object
</td>

<td class="syntaxTABLE">
表示客户端窗口大小或第一个加载的文档。大小包含宽和高的属性，这些在窗口调整大小时不能被修改。</td>
		</tr>
<tr>
		<td class="syntaxTABLE"><a href="#version">version</a></td>
<td class="syntaxTABLE">
Number
</td>

<td class="syntaxTABLE">
JavaScript API的当前版本。</td>
		</tr>
</table>

<H4 class=dtH4>方法表</H4>
<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
		<th class="tableheader">方法</th>
		<th class="tableheader">返回值</th>
		<th class="tableheader">描述</th>
		</tr>

<tr>
<td class="syntaxTABLE"><a href="#esri.filter">esri.filter(object, callback, thisObject)</a></td><td class="syntaxTABLE">
Object
</td>
<td class="syntaxTABLE">创建一个带有全部属性的对象，通过在函数中提供的过滤器实现的测试</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#esri.graphicsExtent">esri.graphicsExtent(graphics)</a></td><td class="syntaxTABLE">
<a href="extent.htm">Extent</a>
</td>
<td class="syntaxTABLE">返回图形数组的范围的实用函数。如果范围高和宽是0，返回null。</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#hide">esri.hide(element)</a></td><td class="syntaxTABLE">
none
</td>
<td class="syntaxTABLE">隐藏一个html元素，例如DIV或TABLE。</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#request">esri.request(request, useProxy?)</a></td><td class="syntaxTABLE">
Object
</td>
<td class="syntaxTABLE">dojo.io.script.get和dojo.xhrPost的封装类。为了从服务器端请求数据，当esriConfig.defaults.io.proxyURL和esriConfig.defaults.io.alwaysUseProxy设置时该方法处理发送请求。当服务器响应是一个错误时，这个方法包含一个默认错误处理方法。返回对象是dojo.Deferred。</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#show">esri.show(element)</a></td><td class="syntaxTABLE">
none
</td>
<td class="syntaxTABLE">显示一个html元素，例如DIV或TABLE。</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#substitute">esri.substitute(data, template?, first?)</a></td><td class="syntaxTABLE">
String
</td>
<td class="syntaxTABLE">dojo.string.substitute的封装类，能处理通配符替换。一个通配符使用<code>${*}</code>格式。如果没有提供模板，将视为一个通配符。例如，如果不是使用<a href="graphic.htm">Graphic</a>或<a href="infotemplate.htm">InfoTemplate</a>但又想在HTML里面嵌入结果值，这个方法是有用的。</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#toggle">esri.toggle(element)</a></td><td class="syntaxTABLE">
none
</td>
<td class="syntaxTABLE">如果一个HTML元素当前是可见的，元素被隐藏。如果元素是隐藏的，则变为可见的。.</td>	</tr><tr>
<td class="syntaxTABLE"><a href="#urlToObject">esri.urlToObject(url)</a></td><td class="syntaxTABLE">
Object
</td>
<td class="syntaxTABLE">转换URL参数为一个对象表示法。对象格式是<br>
<pre>{path: &lt;String>, query:{key:&lt;Object>}}</pre></td>	</tr><tr>
<td class="syntaxTABLE"><a href="#valueOf">esri.valueOf(array, value)</a></td><td class="syntaxTABLE">
Object
</td>
<td class="syntaxTABLE">循环访问参数数组并查找和参数值匹配的标识符。如果没有匹配标识符，则返回null。</td>	</tr></table>

<div class=sectionDivider>属性详细信息</div>
<div class="detaildiv">		<div class="detailname"><H4>
		<a name="config"></a>
&lt;Object> config</H4></div>

<div class="detaildesc">ArcGIS JavaScript API默认配置能够由程序覆盖。详细信息，见<a href="../jshelp/inside_defaults.htm">Default API configurations</a></div>

</div>

<div class="detaildiv">		<div class="detailname"><H4>
		<a name="documentBox"></a>
&lt;Object> documentBox</H4></div>

<div class="detaildesc">表示客户端窗口大小或第一个加载的文档。大小包含宽和高的属性，这些在窗口调整大小时不能被修改。<i> (As of v1.3)</i></div>

</div>

<div class="detaildiv">		<div class="detailname"><H4>
		<a name="version"></a>
&lt;Number> version</H4></div>

<div class="detaildesc">JavaScript API的当前版本。<i> (As of v1.2)</i></div>

</div>

<div class=sectionDivider>方法详细信息</div>
<div class="detaildiv">
		<div class="detailname"><a name="esri.filter"></a><H4>
esri.filter(object, callback, thisObject)</H4></div>

<div class="detaildesc">创建一个带有全部属性的对象，通过在函数中提供的过滤器实现的测试<i> (As of v1.2)</i></div>

<div class="detaildesc"><strong>返回值:</strong>Object</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Object><B>Object</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
要过滤的对象</td>
			</tr>
<tr>
			<td class="detailTABLE">
&lt;Function> <B>callback</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
过滤器执行的函数或字符串。</td>
			</tr>
<tr>
			<td class="detailTABLE">
&lt;Object> <B>thisObject</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
可选对象，用于调用callback函数的作用域。</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<pre>
      function showResults(results) {
        var filterFunction = function(value) {
          if ((value !== ' ') & (Number(value) !== 0)) {
            return true;
          }
        };

        var filteredResults = esri.filter(results.features[0].attributes, filterFunction);
        var s = "";
        for (att in filteredResults) {
          s = s + "<b>" + att + ":</b>  " + filteredResults[att] + "<br />";
        }
        dojo.byId("info").innerHTML = s;
      }
</pre><br/>
		</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="esri.graphicsExtent"></a><H4>
esri.graphicsExtent(graphics)</H4></div>

<div class="detaildesc">返回图形数组的范围的实用函数。如果范围高和宽是0，返回null。<i> (As of v1.3)</i></div>

<div class="detaildesc"><strong>返回值:</strong> <a href="extent.htm">Extent</a></div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;<a href="graphics.htm">Graphics</a>> <B>graphics</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">输入图形数组。</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<pre>
var myFeatureExtent = esri.graphicsExtent(myFeatureSet.features);
</pre><br/>
		</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="hide"></a><H4>
esri.hide(element)</H4></div>

<div class="detaildesc">隐藏一个html元素，例如DIV或TABLE。</div>

<div class="detaildesc"><strong>返回值:</strong> none</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Element> <B>element</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">HTML元素的名称。</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<pre>esri.hide(myTable);</pre><br/>
		</div>

	<div class="detaildesc">
			<strong>参见:</strong><br/>

<a href="#toggle">toggle</a>&nbsp;&nbsp;
<a href="#show">show</a>&nbsp;&nbsp;
</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="request"></a><H4>
esri.request(request, useProxy?)</H4></div>

<div class="detaildesc">dojo.io.script.get和dojo.xhrPost的封装类。为了从服务器端请求数据，当esriConfig.defaults.io.proxyURL和esriConfig.defaults.io.alwaysUseProxy设置时该方法处理发送请求。当服务器响应是一个错误时，这个方法包含一个默认错误处理方法。返回对象是dojo.Deferred。</div>

<div class="detaildesc"><strong>返回值:</strong>对象</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Object> <B>request</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
请求的对象。 </td>
			</tr>
<tr>
			<td class="detailTABLE">
&lt;Boolean> <B>useProxy</B></td>
			<td class="detailTABLE">
可选项</td>
			<td class="detailTABLE">
当值为true时，强制一个请求通过代理用POST方式提交，即使内容长度小于2k。 <i>(As of v1.3)</i></td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<p>
        下面的例子发送一个请求并在完成时调用'load'函数。
        </p>
<pre>esri.request({
  url:"", 
  content:{},
  callbackParamName:"callback",
  load:function(response, io) {...}, 
  error:esriConfig.defaults.io.errorHandler
});</pre><br/>
		</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="show"></a><H4>
esri.show(element)</H4></div>

<div class="detaildesc">显示一个html元素，例如DIV或TABLE。</div>

<div class="detaildesc"><strong>返回值:</strong> none</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Element> <B>element</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">HTML元素的名称。</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<pre>esri.show(myDiv);</pre><br/>
		</div>

	<div class="detaildesc">
			<strong>参见:</strong><br/>

<a href="#hide">hide</a>&nbsp;&nbsp;
<a href="#toggle">toggle</a>&nbsp;&nbsp;
</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="substitute"></a><H4>
esri.substitute(data, template?, first?)</H4></div>

<div class="detaildesc">dojo.string.substitute的封装类，能处理通配符替换。一个通配符使用<code>${*}</code>格式。如果没有提供模板，将视为一个通配符。例如，如果不是使用<a href="graphic.htm">Graphic</a>或<a href="infotemplate.htm">InfoTemplate</a>但又想在HTML里面嵌入结果值，这个方法是有用的。</div>

<div class="detaildesc"><strong>返回值:</strong> String</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Object> <B>data</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
            
用在替换中的数据对象。</td>
			</tr>
<tr>
			<td class="detailTABLE">
&lt;String> <B>template</B></td>
			<td class="detailTABLE">
可选项</td>
			<td class="detailTABLE">
用于替换的模板。能够是任意有效的html。如果没有包含模板，通配符模板被使用。</td>
			</tr>
<tr>
			<td class="detailTABLE">
&lt;Boolean> <B>first</B></td>
			<td class="detailTABLE">
可选项</td>
			<td class="detailTABLE">
当值为true时，仅仅返回数据对象中找到的第一个属性。默认值是false。</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<p><b>Example 1:</b> 没有包含通配符。</p>
<pre>esri.substitute({state_name: "Arizona", state_capital: "Phoenix"});</pre>

<p>Returns: state_name = Arizona &lt;br/> state_capital = PHoenix</p>

<p><b>Example 2:</b> 没有包含通配符，仅仅第一个属性被显示。</p>
<pre>esri.substitute({state_name: "Arizona", state_capital: "Phoenix"},null,true);</pre>

<p>Returns:  state_name = Arizona &lt;br/></p>

<p><b>Example 3:</b> 包含一个显示的模板.</p>
<pre>esri.substitute({state_name: "Arizona", state_capital: "Phoenix"},"The capital of ${state_name} is ${state_capital}.");</pre>

<p>Returns:  The capital of Arizona is Phoenix.</p><br/>
		</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="toggle"></a><H4>
esri.toggle(element)</H4></div>

<div class="detaildesc">如果一个HTML元素当前是可见的，元素被隐藏。如果元素是隐藏的，则变为可见的。.</div>

<div class="detaildesc"><strong>返回值:</strong> none</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Element> <B>element</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">HTML元素的名称。</td>
			</tr>
</table>

	<div class="detaildesc">
			<strong>参见:</strong><br/>

<a href="#show">show</a>&nbsp;&nbsp;
<a href="#hide">hide</a>&nbsp;&nbsp;
</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="urlToObject"></a><H4>
esri.urlToObject(url)</H4></div>

<div class="detaildesc">转换URL参数为一个对象表示法。对象格式是<br>
<pre>{path: &lt;String>, query:{key:&lt;Object>}}</pre></div>

<div class="detaildesc"><strong>返回值:</strong>对象</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;String> <B>url</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
输入的URL.</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<pre>esri.urlToObject("http://www.myworld.com?state_name=Ohio&city_name=Akron");</pre>

<p>Returns:  { path: "http://www.myworld.com", query: {state_name: "Ohio", city_name: "Akron"} }</p><br/>
		</div>

</div>

<div class="detaildiv">
		<div class="detailname"><a name="valueOf"></a><H4>
esri.valueOf(array, value)</H4></div>

<div class="detaildesc">循环访问参数数组并查找和参数值匹配的标识符。如果没有匹配标识符，则返回null。</div>

<div class="detaildesc"><strong>返回值:</strong>对象</div>
<div class="detaildesc">
<strong>输入参数:</strong></div>

<table CLASS="syntaxTABLE" cellspacing="0">
<tr>
			<td class="detailTABLE">
&lt;Array> <B>array</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
测试的参数数组。</td>
			</tr>
<tr>
			<td class="detailTABLE">
&lt;Object> <B>value</B></td>
			<td class="detailTABLE">
必需的	</td>
			<td class="detailTABLE">
用于搜索的值。如果值是一个字符串，则值是区分大小写的。</td>
			</tr>
</table>

<div class="detaildesc">
		<strong>代码片段:</strong><br/>
		<p><b>Example 1:</b></p>
<pre>esri.valueOf([firststring: "Oregon", secondstring: "Washington"], "Washington");</pre>

<p>Returns: secondstring</p>

<p><b>Example 2:</b></p>
<pre>esri.valueOf([firststring: "Oregon", secondstring: "Washington"], "Virginia");</pre>

<p>Returns:  null</p><br/>
		</div>

</div>

<br/></div></body></html> 
